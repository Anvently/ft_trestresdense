name: transcendence

#Env file template
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=postgres
# POSTGRES_HOST=db
# POSTGRES_PORT=5432

# POSTGRES_DB_AUTH=auth
# POSTGRES_DB_USERS=users

services:

  nginx:
    container_name: nginx_c
    image: nginx
    ports:
      - 8083:443
      - 8080:80
    volumes:
      - ./frontend/:/www/html/
      - ${DATA_DIR}logs/nginx/:/var/log/nginx/:rw
      - ./srcs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${DATA_DIR}keys/ssl/ssl.crt:/etc/certificate/ssl.crt
      - ${DATA_DIR}media/avatars/:/www/html/avatars/:ro
    secrets:
      - ssl-key
    depends_on:
      auth:
        condition: service_started
      pong:
        condition: service_started
      users_api:
        condition: service_started
      matchmaking:
        condition: service_started
      db:
        condition: service_healthy

  db:
    container_name: db_c
    image: postgres
    volumes:
      - ${DATA_DIR}db:/var/lib/postgresql/data
      - ./srcs/scripts/db_entrypoint:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_DB_AUTH},${POSTGRES_DB_USERS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
      start_interval: 2s

  auth:
    container_name: auth_c
    build:
      context: ./srcs/django_builds
      target: django_authapi
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - ./srcs/backend/auth/:/code
      - ${DATA_DIR}keys/rsa/pub.pem:/etc/certificate/pub.pem
      - ${DATA_DIR}keys/api-tokens/auth:/etc/certificate/api-token
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB_AUTH}
      - ISSUER_URL=${AUTH_ISSUER_URL}
      - API42_UUID=${API42_UUID}
      - API42_SECRET=${API42_SECRET}
    secrets:
      - rsa-key
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://auth:8000/ || (($? == 22))"]
      # interval: 10s
      # timeout: 5s
      # retries: 3
      # start_period: 3s

  redis:
    container_name: redis_c
    image: redis
    ports:
      - "8008:6379"

  pong:
    container_name: pong_c
    build:
      context: ./srcs/django_builds
      target: django_websocketapi
    ports:
      - "8002:8002"
    command: python3 manage.py runserver 0.0.0.0:8002
    depends_on:
        redis:
          condition: service_started
        auth:
          condition: service_started
        
    volumes:
      - ./srcs/backend/pong/:/code
      - ${DATA_DIR}keys/rsa/pub.pem:/etc/certificate/pub.pem
      - ${DATA_DIR}keys/api-tokens/pong:/etc/certificate/api-token
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://pong:8002/ || (($? == 22))"]
      # interval: 10s
      # timeout: 5s
      # retries: 3
      # start_period: 3s

  users_api:
    container_name: users_api_c
    build:
      context: ./srcs/django_builds
      target: django_usersapi
    command: python3 manage.py runserver 0.0.0.0:8001
    volumes:
      - ./srcs/backend/users/:/code
      - ${DATA_DIR}keys/rsa/pub.pem:/etc/certificate/pub.pem
      - ${DATA_DIR}keys/api-tokens/users:/etc/certificate/api-token
      - ${DATA_DIR}/media/avatars:/avatars/
    ports:
      - "8001:8001"
    depends_on:
       db:
          condition: service_healthy
       auth:
          condition: service_started
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB_USERS}
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://users_api:8001/ || (($? == 22))"]
      # interval: 10s
      # timeout: 5s
      # retries: 3
      # start_period: 3s

  matchmaking:
    container_name: matchmaking_c
    build:
      context: ./srcs/django_builds
      target: django_websocketapi
    ports:
      - "8003:8003"
    command: python3 manage.py runserver 0.0.0.0:8003
    depends_on:
        auth:
          condition: service_started
        redis:
          condition: service_started
        pong:
          condition: service_started
        users_api:
          condition: service_started
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://matchmaking:8003/ || (($? == 22))"]
      # interval: 10s
      # timeout: 5s
      # retries: 3
      # start_period: 3s
        
    volumes:
      - ./srcs/backend/matchmaking/:/code
      - ${DATA_DIR}keys/rsa/pub.pem:/etc/certificate/pub.pem
      - ${DATA_DIR}keys/api-tokens/matchmaking:/etc/certificate/api-token
    restart: always

  # web2:
  #   container_name: web2_c
  #   build:
  #     context: ./srcs/django_builds
  #     target: django_main
  #   command: python manage.py runserver 0.0.0.0:8001
  #   volumes:
  #     - ./srcs/backend/webapp/code:/code
  #   ports:
  #     - "8001:8001"
  #   env_file: ./.env
  #   depends_on:
  #     - db

secrets:
  ssl-key:
    file: ${DATA_DIR}keys/ssl/ssl.key
  rsa-key:
    file: ${DATA_DIR}keys/rsa/key.pem

# ports:
# 8000:auth
# 8001: user_api
# 8002 pong
# 8003: matchmaking
